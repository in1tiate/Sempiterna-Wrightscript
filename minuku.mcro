// unfinished perceive macros

macro ANIM_MINUKU_START_1
bg black stack fade
obj general/minuku/minuku_startup name=minuku_startup x=0 y=192 z=4
sfx minuku_start
pause 75
obj general/minuku/eyestartup_minuki name=eyestartup x=0 y=192 z=4
pause 15
obj bg/white name=minukufade x=0 y=192 z=10
fade name=minukufade in speed=10 nowait
pause 60
delete name=minuku_startup
set shake_framecounter 0
endmacro

macro ANIM_MINUKU_START_2
fade name=minukufade out speed=10 nowait
bg minukubg stack fade nowait
pause 60
delete name=minuku_fade
endmacro

macro spinbg
flag stopspin?
goto finishspin$0
is magnifi_heir odoroki?
rotate degrees=360 speed=1 name=minukuspin nowait
is magnifi_heir minuki?
rotate degrees=-360 speed=1 name=minukuspin nowait
timer 360 spinbg
goto endmacro$0

label finishspin$0
delflag stopspin

label endmacro$0
endmacro

macro bind_minuku

// cardinals
gui Button {minuku_leftkey} x=0 y=256 hold name=minuku_btn_left graphic=general/ui/minuku/button_minuku_left_dbg hotkey=k_left
gui Button {minuku_rightkey} x=160 y=256 hold name=minuku_btn_right graphic=general/ui/minuku/button_minuku_right_dbg hotkey=k_right
gui Button {minuku_upkey} x=96 y=192 hold name=minuku_btn_up graphic=general/ui/minuku/button_minuku_up_dbg hotkey=k_up
gui Button {minuku_downkey} x=96 y=300 hold name=minuku_btn_down graphic=general/ui/minuku/button_minuku_down_dbg hotkey=k_down
// ordinals
gui Button {minuku_upleft} x=0 y=192 hold name=minuku_btn_upleft graphic=general/ui/minuku/button_minuku_upleft_dbg
gui Button {minuku_upright} x=160 y=192 hold name=minuku_btn_upright graphic=general/ui/minuku/button_minuku_upright_dbg
gui Button {minuku_downleft} x=0 y=300 hold name=minuku_btn_downleft graphic=general/ui/minuku/button_minuku_downleft_dbg
gui Button {minuku_downright} x=160 y=300 hold name=minuku_btn_downright graphic=general/ui/minuku/button_minuku_downright_dbg

endmacro

macro unbind_minuku

// cardinals
delete name=minuku_btn_left
delete name=minuku_btn_right
delete name=minuku_btn_up
delete name=minuku_btn_down
// ordinals
delete name=minuku_btn_upleft
delete name=minuku_btn_upright
delete name=minuku_btn_downleft
delete name=minuku_btn_downright

endmacro

macro minuku_rangecheck
delflag minuku_inrange
getprop minuku_cursor_position_x name=slice_1 prop=x
{minuku_update_coord x minuku_cursor_position_x}
getprop minuku_cursor_position_y name=slice_1 prop=y
{minuku_update_coord y minuku_cursor_position_y}


getprop minuku_bg_position_y name=bgslice_1 prop=y
{minuku_update_coord bgy minuku_bg_position_y}


is_ex (minuku_cursor_position_x >= minuku_range_x) AND (minuku_cursor_position_x <= (minuku_range_x + minuku_range_w)) AND (minuku_cursor_position_y >= minuku_range_y) AND (minuku_cursor_position_y <= (minuku_range_y + minuku_range_h))?
setflag minuku_inrange
//{minuku_debug_display}
endmacro

// this is genuinely so ridiculous and overengineered
// okay. here's the problem. the cool spinning background either overlaps
// with the perceive character, or the perceive character winds up on the top screen
// since it's not possible to shrink or otherwise occulde the background,
// we instead slice the character in 32 16px horizontal slices
// and use annoying math to determine whether they are on the bottom screen or not (with about 18px of leeway).
// we also have to do this for the background (which is mercifully made up of "only" 22 slices)
// this is TREMENDOUSLY perf intensive. i've gotten it about as good as i can get it

// Slow timer that handles occlusion for lower screen bg and char
// Very intensive
macro timed_update
flag endupdate?
goto finishupdate

{update_minuku_character_slices}
{update_minuku_bg_slices}
timer 10 timed_update
goto endmacro

label finishupdate
delflag endupdate
goto endmacro

label endmacro
endmacro

// Create sliced character meta-object and position it
macro setup_minuku_character_slices
setvar slice_y 64
setvar slice_i 1
label slice_loop$0
joinvar slice_current slice_ $slice_i
joinvar slice_path general/minuku/char/placeholder/normal(active)/ $slice_current
obj $slice_path x=-128 y=$slice_y z=0 name=$slice_current
addvar slice_y 16
addvar slice_i 1
is_ex slice_i < 33?
goto slice_loop$0
endmacro

// Scroll sliced character meta-object
// Note: For some reason, scrolling something at a very high speed works better than using nowait here
macro scroll_minuku_character_slices
setvar slice_i 1
label slice_loop$0
joinvar slice_current slice_ $slice_i
scroll name=$slice_current x=$1 y=$2 nowait
addvar slice_i 1
is_ex slice_i < 33?
goto slice_loop$0
endmacro

macro update_minuku_character_slices
// don't do anything if we haven't moved since last time
is last_minuku_cursor $minuku_cursor_position_y?
goto endmacro$0


setvar slice_i 1
label slice_loop$0
joinvar slice_current slice_ $slice_i
fade name=$slice_current start=0 end=0 nowait
// avoids a nasty bug in is_ex preventing comparisons with negative numbers
is_ex minuku_cursor_position_y < 104 slice_show$0
is_ex slice_i * 16 - 1 <= minuku_cursor_position_y + 96 AND slice_i * 16 - 1 >= minuku_cursor_position_y - 104 slice_show$0 fail=slice_hide$0
label slice_show$0
fade name=$slice_current start=100 end=100 nowait
label slice_hide$0

addvar slice_i 1
is_ex slice_i < 33?
goto slice_loop$0

label endmacro$0
set last_minuku_cursor $minuku_cursor_position_y
endmacro

macro setup_minuku_bg_slices
setvar bgslice_y 115
setvar bgslice_i 1
label slice_loop$0
joinvar bgslice_current bgslice_ $bgslice_i
joinvar bgslice_path bg/minukucrt/ $bgslice_current
obj $bgslice_path x=-96 y=$bgslice_y z=-1 name=$bgslice_current
addvar bgslice_y 16
addvar bgslice_i 1
is_ex bgslice_i < 23?
goto slice_loop$0
endmacro

macro scroll_minuku_bg_slices
setvar bgslice_i 1
label slice_loop$0
joinvar bgslice_current bgslice_ $bgslice_i
scroll name=$bgslice_current x=$1 y=$2 nowait
addvar bgslice_i 1
is_ex bgslice_i < 23?
goto slice_loop$0
endmacro

macro update_minuku_bg_slices
// don't do anything if we haven't moved since last time
is last_bg_cursor $minuku_bg_position_y?
goto endmacro$0

setvar bgslice_i 1
label slice_loop$0
joinvar bgslice_current bgslice_ $bgslice_i
fade name=$bgslice_current start=0 end=0 nowait
// avoids a nasty bug in is_ex preventing comparisons with negative numbers
is_ex minuku_bg_position_y < 86 slice_show$0
is_ex bgslice_i * 16 - 1 <= minuku_bg_position_y + 96 AND bgslice_i * 16 - 1 >= minuku_bg_position_y - 86 slice_show$0 fail=slice_hide$0
label slice_show$0
fade name=$bgslice_current start=100 end=100 nowait
label slice_hide$0

addvar bgslice_i 1
is_ex bgslice_i < 23?
goto slice_loop$0

label endmacro$0
set last_bg_cursor $minuku_bg_position_y
endmacro

// Limits how often movements can be commanded
// Very useful
macro minuku_movement_ticker
flag endticker?
goto finishticker$0

{minuku_rangecheck}

set scroll_x 0
set scroll_y 0
set scroll_bg_x 0
set scroll_bg_y 0

flag mi_hold_up AND mi_hold_left upleft$0
flag mi_hold_up AND mi_hold_right upright$0
flag mi_hold_down AND mi_hold_left downleft$0
flag mi_hold_down AND mi_hold_right downright$0

flag mi_hold_up up$0
flag mi_hold_down down$0
flag mi_hold_left left$0
flag mi_hold_right right$0
goto endtick$0

label upleft$0
{minuku_scroll_up}
{minuku_scroll_left}
goto doscroll$0

label upright$0
{minuku_scroll_up}
{minuku_scroll_right}
goto doscroll$0

label downleft$0
{minuku_scroll_down}
{minuku_scroll_left}
goto doscroll$0

label downright$0
{minuku_scroll_down}
{minuku_scroll_right}
goto doscroll$0

label up$0
{minuku_scroll_up}
goto doscroll$0

label down$0
{minuku_scroll_down}
goto doscroll$0

label left$0
{minuku_scroll_left}
goto doscroll$0

label right$0
{minuku_scroll_right}
goto doscroll$0


label doscroll$0
{scroll_minuku_character_slices $scroll_x $scroll_y 3}
{scroll_minuku_bg_slices $scroll_bg_x $scroll_bg_y 1}

label endtick$0
delflag mi_hold_up
delflag mi_hold_down
delflag mi_hold_left
delflag mi_hold_right

timer 1 minuku_movement_ticker

label finishticker$0
delflag endticker
goto endmacro$0

label endmacro$0
endmacro

// Scroll up, if we can
macro minuku_scroll_up
is_ex minuku_cursor_position_y > 68 doscroll$0 fail=fail$0
label doscroll$0
set scroll_y 3
set scroll_bg_y 1
label fail$0
endmacro

// Scroll down, if we can
macro minuku_scroll_down
is_ex minuku_cursor_position_y < 511 doscroll$0 fail=fail$0
label doscroll$0
set scroll_y -3
set scroll_bg_y -1
label fail$0
endmacro

// Scroll left, if we can
macro minuku_scroll_left
is_ex minuku_cursor_position_x > 1 doscroll$0 fail=fail$0
label doscroll$0
set scroll_x 3
set scroll_bg_x 1
label fail$0
endmacro

// Scroll right, if we can
macro minuku_scroll_right
is_ex minuku_cursor_position_x < 511 doscroll$0 fail=fail$0
label doscroll$0
set scroll_x -3
set scroll_bg_x -1
label fail$0
endmacro

// player is holding LEFT
macro minuku_leftkey
setflag mi_hold_left
endmacro

// player is holding RIGHT
macro minuku_rightkey
setflag mi_hold_right
endmacro

// player is holding DOWN
macro minuku_downkey
setflag mi_hold_down
endmacro

// player is holding UP
macro minuku_upkey
setflag mi_hold_up
endmacro

// player is holding the UP-LEFT button (mouse controls only)
macro minuku_upleft
{minuku_upkey}
{minuku_leftkey}
endmacro

// player is holding the UP-RIGHT button (mouse controls only)
macro minuku_upright
{minuku_upkey}
{minuku_rightkey}
endmacro

// player is holding the DOWN-LEFT button (mouse controls only)
macro minuku_downleft
{minuku_downkey}
{minuku_leftkey}
endmacro

// player is holding the DOWN-RIGHT button (mouse controls only)
macro minuku_downright
{minuku_downkey}
{minuku_rightkey}
endmacro

macro minuku_debug_display
delete name=textblocky
textblock 16 32 256 192 name=textblocky cursor y: $minuku_cursor_position_y
delete name=textblockx
textblock 16 16 256 192 name=textblockx cursor x: $minuku_cursor_position_x
set mi_range_dbg false
flag minuku_inrange?
set mi_range_dbg true
delete name=textblockr
textblock 16 48 256 192 name=textblockr in range: $mi_range_dbg
endmacro

// translate an x coordinate from 128, -384 to 0, 512 range
// or translate a y coordinate from 288, -96 to 0, 384 range
// used exclusively to make my life easier when setting up perceive regions
// usage:
// minuku_update_coord [x|y] variable_to_update
macro minuku_update_coord
set coordmode $1
getvar coord $2
goto coord$1$0

// x coordinate
// starts out as 128, -384
// translate to 512, 0
label coordx$0
addvar coord 384
// then flip it
set coord_tmp 512
goto coordfinish$0

// y coordinate
// starts out as 448, -64
// translate to 512, 0
label coordy$0
addvar coord 64
// then flip it
set coord_tmp 384
goto coordfinish$0

// bg y coordinate
// starts out as 320, -26
// translate to 461, 0
label coordbgy$0
addvar coord 26
// then flip it
set coord_tmp 320
goto coordfinish$0

label coordfinish$0
// this step is the same
// for all coords
subvar coord_tmp $coord
setvar coord $coord_tmp

// discard the decimal place
absvar coord
set $2 $coord
endmacro

macro shake_obj
// if called with an argument, save it
set staging $1
isnotempty staging?
set obj_to_shake $1
set staging $2
isnotempty staging?
set obj_to_shake2 $2

// loop has to be manually stopped
flag stopshake?
goto finishshake

// moving up and left 1px
is_ex shake_framecounter < 4?
scroll name=$obj_to_shake x=-1 y=-1 speed=1 nowait
is_ex shake_framecounter < 4?
scroll name=$obj_to_shake2 x=-1 y=-1 speed=1 nowait
is_ex shake_framecounter < 4?
addvar shake_framecounter 1

// moved a total of 4 pixels, so reset on the fifth
is shake_framecounter 4?
scroll name=$obj_to_shake x=4 y=4 speed=4 nowait
is shake_framecounter 4?
scroll name=$obj_to_shake2 x=4 y=4 speed=4 nowait
is shake_framecounter 4?
set shake_framecounter 0

// call again in 2 frames
//timer 2 shake_obj
goto endmacro

label finishshake
delflag stopshake
goto endmacro

label endmacro
endmacro