// INTEGER DIVISION
// via repeated subtraction
// Stores results in global variables
// Will cause lag on very large operands
//
// This is only useful if you want to operate on the remainder.
// If you don't care about that, you can use the engine's float division 
// and then discard the decimal place, like this:
// set x 10
// divvar x 2 // x is now "5.0"
// absvar x // x is now 5
macro intdiv
// don't have to care abt signs
// since negative numbers arent real
set _dividend $1
set _divisor $2
set _quotient 0
set _remainder

// 0 divided by anything is 0
is_ex _dividend == 0?
goto _intdiv_loop_end$0

// anything divided by 1 is itself
is_ex _divisor 1?
set _quotient $_dividend
is_ex _divisor 1?
set _remainder 0
is_ex _divisor 1?
goto _intdiv_loop_end$0

// Special handler for divisor > dividend
is_ex _divisor > _dividend?
set _remainder $_dividend
is_ex _divisor > _dividend?
goto _intdiv_loop_end$0

// dividing by 0 would cause an infinite loop
is_ex _divisor == 0?
set _err Fatal error: Call to intdiv $_dividend $_divisor would result in undefined behavior: Divide by zero
is_ex _divisor == 0?
THROW_ERROR
is_ex _divisor == 0?
goto _intdiv_loop_end$0

label _intdiv_loop_start$0
addvar _quotient 1
subvar _dividend $_divisor
is_ex _dividend < _divisor?
goto _intdiv_loop_end$0
goto _intdiv_loop_start$0
label _intdiv_loop_end$0
set _remainder $_dividend
endmacro

macro is_even
set _operand $1
intdiv $_operand 2
set $2 true
is_ex _remainder > 0?
set $2 false
endmacro